{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DART DART is the Digital Archivist's Resource Tool. It provides both a GUI and a command-line interface for packaging files and uploading them to remote repositories. Supported Operations The initial release of DART 2.0 supports the following features: Creating BagIt bags that conform to defined BagIt profiles Validating BagIt bags according to defined BagIt profiles Uploading bags and other files to remote S3 endpoints Creating and modifying BagIt profiles through a visual point-and-click editor Defining repeatable Workflows for bagging and uploading files Running multiple simultaneous bagging and upload jobs Read-only integration with the APTrust's REST API to display the status of ingested materials and pending work items A command-line tool to enable scriptable bagging and upload operations To start using DART, see our Getting Started page. Plugin Architecture Most of DART's features are implemented in plugins, which enable developers to add new features without having to understand all of DART's internals. DART is an open source project of the Academic Preservation Trust, which encourages developers to contribute new plugins to extend the tool's functionality. DART 2.0 supports the following types of plugins: Format Readers - These allow DART to read files packaged in various formats, such as tar, zip, rar, parchive, OCFL, etc. Currently supported in formats in version 2.0: directory/file system tar Format Writers - These allow DART to write files in various formats, such as tar, zip, rar, parchive, OCFL, etc. Currently supported in formats in version 2.0: directory/file system tar Network Clients - These allow DART to send and retrieve files across a network. DART 2.0 supports the following protocols: S3 Repository Clients - These allow DART to interact with remote repositories. Currently supported: APTrust Setup Modules - These allow organizations to install default settings and create a list of simple questions to get local users up and running quickly. Currently supported: APTrust DPN Writing DART plugins requires a working knowledge of JavaScript and HTML. If you're interested in developing DART plugins, see our Developers page and our full API documentation . Useful Links Getting Started with DART Developing DART Plugins DART API documentation DART source code on GitHub Credits Brace yourselves gentlemen. According to the gas chromatograph, the secret ingredient is... Love!? Who's been screwing with this thing?","title":"Home"},{"location":"#welcome-to-dart","text":"DART is the Digital Archivist's Resource Tool. It provides both a GUI and a command-line interface for packaging files and uploading them to remote repositories.","title":"Welcome to DART"},{"location":"#supported-operations","text":"The initial release of DART 2.0 supports the following features: Creating BagIt bags that conform to defined BagIt profiles Validating BagIt bags according to defined BagIt profiles Uploading bags and other files to remote S3 endpoints Creating and modifying BagIt profiles through a visual point-and-click editor Defining repeatable Workflows for bagging and uploading files Running multiple simultaneous bagging and upload jobs Read-only integration with the APTrust's REST API to display the status of ingested materials and pending work items A command-line tool to enable scriptable bagging and upload operations To start using DART, see our Getting Started page.","title":"Supported Operations"},{"location":"#plugin-architecture","text":"Most of DART's features are implemented in plugins, which enable developers to add new features without having to understand all of DART's internals. DART is an open source project of the Academic Preservation Trust, which encourages developers to contribute new plugins to extend the tool's functionality. DART 2.0 supports the following types of plugins: Format Readers - These allow DART to read files packaged in various formats, such as tar, zip, rar, parchive, OCFL, etc. Currently supported in formats in version 2.0: directory/file system tar Format Writers - These allow DART to write files in various formats, such as tar, zip, rar, parchive, OCFL, etc. Currently supported in formats in version 2.0: directory/file system tar Network Clients - These allow DART to send and retrieve files across a network. DART 2.0 supports the following protocols: S3 Repository Clients - These allow DART to interact with remote repositories. Currently supported: APTrust Setup Modules - These allow organizations to install default settings and create a list of simple questions to get local users up and running quickly. Currently supported: APTrust DPN Writing DART plugins requires a working knowledge of JavaScript and HTML. If you're interested in developing DART plugins, see our Developers page and our full API documentation .","title":"Plugin Architecture"},{"location":"#useful-links","text":"Getting Started with DART Developing DART Plugins DART API documentation DART source code on GitHub","title":"Useful Links"},{"location":"#credits","text":"Brace yourselves gentlemen. According to the gas chromatograph, the secret ingredient is... Love!? Who's been screwing with this thing?","title":"Credits"},{"location":"developers/","text":"Developer's Guide to DART Design Principles Yadda yadda yadda. Section One Write you some code. Section Two Test your code. Section Three Document your code.","title":"Developer's Guide to DART"},{"location":"developers/#developers-guide-to-dart","text":"","title":"Developer's Guide to DART"},{"location":"developers/#design-principles","text":"Yadda yadda yadda.","title":"Design Principles"},{"location":"developers/#section-one","text":"Write you some code.","title":"Section One"},{"location":"developers/#section-two","text":"Test your code.","title":"Section Two"},{"location":"developers/#section-three","text":"Document your code.","title":"Section Three"},{"location":"developers/architecture/","text":"Architecture Tech Stack Electron, Node.js, HTML 5, Bootstrap, Handlebars Design choices: limit dynamnic JS, lightweight page loads MVC Pattern Similar to Rails. Dead simple. Fast, lightweight page reloads. Reduces JS complexity. Handlebars templates are brain dead.","title":"Architecture"},{"location":"developers/architecture/#architecture","text":"","title":"Architecture"},{"location":"developers/architecture/#tech-stack","text":"Electron, Node.js, HTML 5, Bootstrap, Handlebars Design choices: limit dynamnic JS, lightweight page loads","title":"Tech Stack"},{"location":"developers/architecture/#mvc-pattern","text":"Similar to Rails. Dead simple. Fast, lightweight page reloads. Reduces JS complexity. Handlebars templates are brain dead.","title":"MVC Pattern"},{"location":"developers/building/","text":"Building Building DART","title":"Building"},{"location":"developers/building/#building","text":"Building DART","title":"Building"},{"location":"developers/data_storage/","text":"Data Storage JSON only, plain text. Describe location of data files, PersistentObject.","title":"Data Storage"},{"location":"developers/data_storage/#data-storage","text":"JSON only, plain text. Describe location of data files, PersistentObject.","title":"Data Storage"},{"location":"developers/documenting/","text":"Documenting DART Document your code. Someone will have to maintain it!","title":"Documenting"},{"location":"developers/documenting/#documenting-dart","text":"Document your code. Someone will have to maintain it!","title":"Documenting DART"},{"location":"developers/job_flow/","text":"Job Flow Describe workers. What happens when you run a job?","title":"Job Flow"},{"location":"developers/job_flow/#job-flow","text":"Describe workers. What happens when you run a job?","title":"Job Flow"},{"location":"developers/logging/","text":"Logging Where the logs are written. Tailing the logs to see what's happening. Using the logger in your own code.","title":"Logging"},{"location":"developers/logging/#logging","text":"Where the logs are written. Tailing the logs to see what's happening. Using the logger in your own code.","title":"Logging"},{"location":"developers/testing/","text":"Testing DART Running existing tests. Writing tests for your modules.","title":"Testing"},{"location":"developers/testing/#testing-dart","text":"Running existing tests. Writing tests for your modules.","title":"Testing DART"},{"location":"developers/plugins/","text":"Plugins About... Describe the anatomy of a plugin description.","title":"Plugins"},{"location":"developers/plugins/#plugins","text":"About... Describe the anatomy of a plugin description.","title":"Plugins"},{"location":"developers/plugins/format_readers/","text":"Format Readers What they do. How to write one.","title":"Format Readers"},{"location":"developers/plugins/format_readers/#format-readers","text":"What they do. How to write one.","title":"Format Readers"},{"location":"developers/plugins/format_writers/","text":"Format Writers What they do. How to write one.","title":"Format Writers"},{"location":"developers/plugins/format_writers/#format-writers","text":"What they do. How to write one.","title":"Format Writers"},{"location":"developers/plugins/manager/","text":"Plugin Manager About the plugin manager.","title":"Plugin Manager"},{"location":"developers/plugins/manager/#plugin-manager","text":"About the plugin manager.","title":"Plugin Manager"},{"location":"developers/plugins/network_clients/","text":"Network Clients What they do. How they enable new types of storage services. How they show up in the providers list. How to write one.","title":"Network Clients"},{"location":"developers/plugins/network_clients/#network-clients","text":"What they do. How they enable new types of storage services. How they show up in the providers list. How to write one.","title":"Network Clients"},{"location":"developers/plugins/repo_clients/","text":"Repository Clients What they do. Requirements: REST API. Inputs and outputs.","title":"Repository Clients"},{"location":"developers/plugins/repo_clients/#repository-clients","text":"What they do. Requirements: REST API. Inputs and outputs.","title":"Repository Clients"},{"location":"developers/plugins/setup_modules/","text":"Setup Modules Describe what they do and why they're useful. Describe how to build and test them.","title":"Setup Modules"},{"location":"developers/plugins/setup_modules/#setup-modules","text":"Describe what they do and why they're useful. Describe how to build and test them.","title":"Setup Modules"},{"location":"users/about/","text":"About DART is the Digital Archivist's Resource Tool. It provides both a GUI and command line interface for packaging files and sending them off to remote repositories. About Your Dart Version DART's About dialog shows information about DART, including the application version, and the location of the executable, the log files, and the data files. To display it, click Help About on the main menu. You should see something like this:","title":"About"},{"location":"users/about/#about","text":"DART is the Digital Archivist's Resource Tool. It provides both a GUI and command line interface for packaging files and sending them off to remote repositories.","title":"About"},{"location":"users/about/#about-your-dart-version","text":"DART's About dialog shows information about DART, including the application version, and the location of the executable, the log files, and the data files. To display it, click Help About on the main menu. You should see something like this:","title":"About Your Dart Version"},{"location":"users/command_line/","text":"Command Line Reference Describe how to use the CLI. Memory usage and known issues. Checking the log for failed jobs.","title":"Command Line Reference"},{"location":"users/command_line/#command-line-reference","text":"Describe how to use the CLI. Memory usage and known issues. Checking the log for failed jobs.","title":"Command Line Reference"},{"location":"users/dashboard/","text":"Dashboard The dashboard shows running jobs, recently completed jobs, and selected items from remote repositories. Running Jobs The Running Jobs panel shows jobs DART is currently running on your computer. If more than one job is currently running, you can scroll inside the panel to see the progress of each. Also note the blue badge in the upper right corner of the window showing there are two running jobs. The blue badge appears on all DART views as long as jobs are running. Note that DART runs each job in a separate process. Actions you take in DART do not affect the running jobs. Warning When you shut down the DART application, all DART jobs stop, even if they are not yet complete. Don't close the DART window while jobs are running, unless you intend to stop all of the jobs. Progress Bars for Running Jobs The progress bars for running jobs show how much progress DART has made in each of the job's steps, which may include packaging, validation, and/or uploading. Info While the progress bars for packaging and validation are very accurate, the progress bar for uploads runs slightly ahead of the actual upload progress. DART knows how many bytes of an upload it has prepared to send, but not how many have been received by the remote host. It's common for the upload progress bar to appear to stall at about 98% while the last chunk of data goes across the wire. For smaller uploads, the stall may last only a second or two. For very large uploads, the final chunk may be hundreds of megabytes and may take several minutes to complete. Recent Jobs The Recent Jobs panel lists recently completed jobs. The Outcome column shows the job's last completed step, while the Date column shows when that step was completed. You can get more detailed information by clicking Jobs List from the top menu. See also: Jobs Repositories The Repositories panels show items from remote repositories that DART knows how to connect to. In the screenshot above, this panel shows items recently ingested into APTrust's demo repository: The panel below shows a list of pending or recently completed tasks from APTrust demo system. Some repository panels, such as those from APTrust, show additional information when you mouse over an item. The panels show errors if they cannot communicate with the remote repository. If you run into errors like this, chances are your Remote Repository is incorrectly configured. Info Remote repository panels require both a correctly configured Remote Repository setting and a plugin that knows how to communicate with the remote repository. Plugins are typically written by developers associated with the repository, and are packaged with the DART installation. See also: Remote Repository","title":"Dashboard"},{"location":"users/dashboard/#dashboard","text":"The dashboard shows running jobs, recently completed jobs, and selected items from remote repositories.","title":"Dashboard"},{"location":"users/dashboard/#running-jobs","text":"The Running Jobs panel shows jobs DART is currently running on your computer. If more than one job is currently running, you can scroll inside the panel to see the progress of each. Also note the blue badge in the upper right corner of the window showing there are two running jobs. The blue badge appears on all DART views as long as jobs are running. Note that DART runs each job in a separate process. Actions you take in DART do not affect the running jobs. Warning When you shut down the DART application, all DART jobs stop, even if they are not yet complete. Don't close the DART window while jobs are running, unless you intend to stop all of the jobs.","title":"Running Jobs"},{"location":"users/dashboard/#progress-bars-for-running-jobs","text":"The progress bars for running jobs show how much progress DART has made in each of the job's steps, which may include packaging, validation, and/or uploading. Info While the progress bars for packaging and validation are very accurate, the progress bar for uploads runs slightly ahead of the actual upload progress. DART knows how many bytes of an upload it has prepared to send, but not how many have been received by the remote host. It's common for the upload progress bar to appear to stall at about 98% while the last chunk of data goes across the wire. For smaller uploads, the stall may last only a second or two. For very large uploads, the final chunk may be hundreds of megabytes and may take several minutes to complete.","title":"Progress Bars for Running Jobs"},{"location":"users/dashboard/#recent-jobs","text":"The Recent Jobs panel lists recently completed jobs. The Outcome column shows the job's last completed step, while the Date column shows when that step was completed. You can get more detailed information by clicking Jobs List from the top menu. See also: Jobs","title":"Recent Jobs"},{"location":"users/dashboard/#repositories","text":"The Repositories panels show items from remote repositories that DART knows how to connect to. In the screenshot above, this panel shows items recently ingested into APTrust's demo repository: The panel below shows a list of pending or recently completed tasks from APTrust demo system. Some repository panels, such as those from APTrust, show additional information when you mouse over an item. The panels show errors if they cannot communicate with the remote repository. If you run into errors like this, chances are your Remote Repository is incorrectly configured. Info Remote repository panels require both a correctly configured Remote Repository setting and a plugin that knows how to communicate with the remote repository. Plugins are typically written by developers associated with the repository, and are packaged with the DART installation. See also: Remote Repository","title":"Repositories"},{"location":"users/getting_started/","text":"Getting Started Getting started with DART... Installation Installing DART... Set Up Set up modules... Set some defaults... Running Your First Job Run a job in DART... Further Reading See Jobs and Workflows.","title":"Getting Started"},{"location":"users/getting_started/#getting-started","text":"Getting started with DART...","title":"Getting Started"},{"location":"users/getting_started/#installation","text":"Installing DART...","title":"Installation"},{"location":"users/getting_started/#set-up","text":"Set up modules... Set some defaults...","title":"Set Up"},{"location":"users/getting_started/#running-your-first-job","text":"Run a job in DART...","title":"Running Your First Job"},{"location":"users/getting_started/#further-reading","text":"See Jobs and Workflows.","title":"Further Reading"},{"location":"users/logs/","text":"Logs DART logs most of its activities as it works. If you're looking for detailed infomation about what DART is doing or has done, or if you want to see detailed error messages, check the logs. The easiest way to view the DART log is to click Help Logs from the menu. This will display a live log window that shows updates as they are written. The About dialog will show the location of the DART log file.","title":"Logs"},{"location":"users/logs/#logs","text":"DART logs most of its activities as it works. If you're looking for detailed infomation about what DART is doing or has done, or if you want to see detailed error messages, check the logs. The easiest way to view the DART log is to click Help Logs from the menu. This will display a live log window that shows updates as they are written. The About dialog will show the location of the DART log file.","title":"Logs"},{"location":"users/scripting/","text":"Scripting with DART Scripting with DART. Give examples in Ruby, Python, Shell. Examples should include running from a Job file, JobParams file, Job JSON and JobParams JSON. Example: Ruby Example: Python Example: PHP Example: Bash","title":"Scripting with DART"},{"location":"users/scripting/#scripting-with-dart","text":"Scripting with DART. Give examples in Ruby, Python, Shell. Examples should include running from a Job file, JobParams file, Job JSON and JobParams JSON.","title":"Scripting with DART"},{"location":"users/scripting/#example-ruby","text":"","title":"Example: Ruby"},{"location":"users/scripting/#example-python","text":"","title":"Example: Python"},{"location":"users/scripting/#example-php","text":"","title":"Example: PHP"},{"location":"users/scripting/#example-bash","text":"","title":"Example: Bash"},{"location":"users/workflows/","text":"Workflows Describe what they are, why you would use them. They can be run from the UI or the command line. Describe how to create them.","title":"Workflows"},{"location":"users/workflows/#workflows","text":"Describe what they are, why you would use them. They can be run from the UI or the command line. Describe how to create them.","title":"Workflows"},{"location":"users/bagit/","text":"BagIt Profiles While the BagIt specification describes the general requirements for a valid bag, BagIt profiles describe the tags, manifests, and tag manifests required to make a valid bag for a specific organization or purpose. DART uses BagIt profiles to produce bags that adhere to a profile, and to validate that bags do adhere to the profile. DART BagIt Profiles While the general specification for BagIt Profiles can be found on GitHub , DART's BagIt profiles differ from the published specification in the following ways: DART profiles use camel case identifiers with no hyphens or periods in attribute names. For example, the Allow-Fetch.txt in GitHub BagIt profiles is called allowFetchTxt in DART profiles. This is in part to simplify JavaScript attributes so they can be reference in dot notation, and in part because the nedb object database used in early versions of DART did not support attribute names containing dots. DART profiles include an id attribute with a UUID. This is used internally, while externally the bagItProfileIdentifier URL is used externally. DART profiles include the following additional boolean attributes: allowMiscTopLevelFiles which indicates whether files other than manifests and tag manifests are allowed in the bag's root directory. allowMiscDirectories which indicates whether directories other than /data and its children are allowed in the bag. tarDirMustMatchName which indicates whether the name of the unserialized bag must match the name of the serialized bag, minus the serialization extension. (That is, whether my_bag.tar must untar to my_bag, and my_bag.zip must unzip to my_bag.) DART includes the attribute baseProfileId for internal use, to know whether a user-created profile was based on an existing profile. DART includes the isBuiltIn attribute to indicate that a profile was built in to the application (usually through a setup module or migration). These profiles cannot be deleted. DART does not specify tagFilesRequired or tagFilesAllowed . DART BagIt profiles specify all tag requirements in a single list called tags while the GitHub BagIt spec defines them as nested objects with arbitrary names. The single list of uniform objects in the DART model makes tag definitions easier to manipulate. While tag definitions in the GitHub BagIt Profile spec include only the attributes required and values , DART tag definitions include the following attributes: id - A unique identifier in UUID format that DART uses internally. This allows users to edit tag definitions in the DART UI without the system losing track of which tag is being edited. The UUID is immutable while all other attributes are not. tagFile - The name of the tag file that contains the tag. This is a path relative to the bag root. For example, bag-info.txt or custom-tags/image-credits.txt . tagName - The name of the tag. For example, Source-Organization . required - A boolean indicating whether the tag is required. values - An option list of legal values. If this list is present and a tag contains a value that's not in the list, the value and the bag are invalid. defaultValue - A default value assigned by the user to the tag. DART's BagIt Profile editor allows users to specify default values to tags that will be consistent across bags. For example, users can define a default value to Source-Organization so they don't have to assign it repeatedly every time they create a new bag. userValue - The value of a tag to be written into or read from a tag file. Users can specify a userValue that overrides the defaultValue when they create a bag. When reading a bag, DART assigns the actual value of a tag to what was read from the bag. isBuiltIn - A boolean value indicating whether a tag definition is built in (as opposed to user-created). DART's BagIt Profile editor allows users to add custom tags to a published profile, such as the APTrust profile, while preventing them from deleting built-in tag definitions. Deleting a built-in tag definition such as Source-Organization would lead to DART generating invalid bags. help - Help text to describe the significance of the tag to the user. If present, the DART UI will display this message for the user's edification and delight. Built-in Profiles DART includes the following built-in profiles. Note that the BagIt Profile editor allows you to clone and customize each of these, though customization is limited to adding tags and tag files, and setting default tag values. APTrust - The standard APTrust BagIt profile. BTR - The Beyond the Repository BagIt profile, which will be accepted by a number of distributed digital preservation repositories. (Coming later in 2019.) DPN - The legacy DPN BagIt profile. This is used primarily for testing and development. Custom Profiles DART enables users to create new BagIt profiles from scratch, and to clone and modify existing profiles. See also: Creating BagIt Profiles , Customizing BagIt Profiles","title":"BagIt Profiles"},{"location":"users/bagit/#bagit-profiles","text":"While the BagIt specification describes the general requirements for a valid bag, BagIt profiles describe the tags, manifests, and tag manifests required to make a valid bag for a specific organization or purpose. DART uses BagIt profiles to produce bags that adhere to a profile, and to validate that bags do adhere to the profile.","title":"BagIt Profiles"},{"location":"users/bagit/#dart-bagit-profiles","text":"While the general specification for BagIt Profiles can be found on GitHub , DART's BagIt profiles differ from the published specification in the following ways: DART profiles use camel case identifiers with no hyphens or periods in attribute names. For example, the Allow-Fetch.txt in GitHub BagIt profiles is called allowFetchTxt in DART profiles. This is in part to simplify JavaScript attributes so they can be reference in dot notation, and in part because the nedb object database used in early versions of DART did not support attribute names containing dots. DART profiles include an id attribute with a UUID. This is used internally, while externally the bagItProfileIdentifier URL is used externally. DART profiles include the following additional boolean attributes: allowMiscTopLevelFiles which indicates whether files other than manifests and tag manifests are allowed in the bag's root directory. allowMiscDirectories which indicates whether directories other than /data and its children are allowed in the bag. tarDirMustMatchName which indicates whether the name of the unserialized bag must match the name of the serialized bag, minus the serialization extension. (That is, whether my_bag.tar must untar to my_bag, and my_bag.zip must unzip to my_bag.) DART includes the attribute baseProfileId for internal use, to know whether a user-created profile was based on an existing profile. DART includes the isBuiltIn attribute to indicate that a profile was built in to the application (usually through a setup module or migration). These profiles cannot be deleted. DART does not specify tagFilesRequired or tagFilesAllowed . DART BagIt profiles specify all tag requirements in a single list called tags while the GitHub BagIt spec defines them as nested objects with arbitrary names. The single list of uniform objects in the DART model makes tag definitions easier to manipulate. While tag definitions in the GitHub BagIt Profile spec include only the attributes required and values , DART tag definitions include the following attributes: id - A unique identifier in UUID format that DART uses internally. This allows users to edit tag definitions in the DART UI without the system losing track of which tag is being edited. The UUID is immutable while all other attributes are not. tagFile - The name of the tag file that contains the tag. This is a path relative to the bag root. For example, bag-info.txt or custom-tags/image-credits.txt . tagName - The name of the tag. For example, Source-Organization . required - A boolean indicating whether the tag is required. values - An option list of legal values. If this list is present and a tag contains a value that's not in the list, the value and the bag are invalid. defaultValue - A default value assigned by the user to the tag. DART's BagIt Profile editor allows users to specify default values to tags that will be consistent across bags. For example, users can define a default value to Source-Organization so they don't have to assign it repeatedly every time they create a new bag. userValue - The value of a tag to be written into or read from a tag file. Users can specify a userValue that overrides the defaultValue when they create a bag. When reading a bag, DART assigns the actual value of a tag to what was read from the bag. isBuiltIn - A boolean value indicating whether a tag definition is built in (as opposed to user-created). DART's BagIt Profile editor allows users to add custom tags to a published profile, such as the APTrust profile, while preventing them from deleting built-in tag definitions. Deleting a built-in tag definition such as Source-Organization would lead to DART generating invalid bags. help - Help text to describe the significance of the tag to the user. If present, the DART UI will display this message for the user's edification and delight.","title":"DART BagIt Profiles"},{"location":"users/bagit/#built-in-profiles","text":"DART includes the following built-in profiles. Note that the BagIt Profile editor allows you to clone and customize each of these, though customization is limited to adding tags and tag files, and setting default tag values. APTrust - The standard APTrust BagIt profile. BTR - The Beyond the Repository BagIt profile, which will be accepted by a number of distributed digital preservation repositories. (Coming later in 2019.) DPN - The legacy DPN BagIt profile. This is used primarily for testing and development.","title":"Built-in Profiles"},{"location":"users/bagit/#custom-profiles","text":"DART enables users to create new BagIt profiles from scratch, and to clone and modify existing profiles. See also: Creating BagIt Profiles , Customizing BagIt Profiles","title":"Custom Profiles"},{"location":"users/bagit/creating/","text":"Creating Profiles To create a new BagIt Profile: Choose Settings BagIt Profiles from the menu. Click the New button at the top of the profiles list. Select an option from the Base Profile list. Chose None if you want to create a new profile from scratch. Choose the name of an existing profile if you want to clone and modify an existing profile. Click the Create button. Note Cloning an existing BagIt profile can be useful if you're going to create bags on behalf of more than one organization or group. You can set different default values for tags such as Source-Organization or Contact-Email within each cloned profile, and then assign meaningful names such as APTrust Profile for Law Library and APTrust Profile for Engineering Library . Once you've created a new BagIt profile, you'll want to customize it using the built-in BagIt profile editor. See also: Customizing BagIt Profiles","title":"Creating Profiles"},{"location":"users/bagit/creating/#creating-profiles","text":"To create a new BagIt Profile: Choose Settings BagIt Profiles from the menu. Click the New button at the top of the profiles list. Select an option from the Base Profile list. Chose None if you want to create a new profile from scratch. Choose the name of an existing profile if you want to clone and modify an existing profile. Click the Create button. Note Cloning an existing BagIt profile can be useful if you're going to create bags on behalf of more than one organization or group. You can set different default values for tags such as Source-Organization or Contact-Email within each cloned profile, and then assign meaningful names such as APTrust Profile for Law Library and APTrust Profile for Engineering Library . Once you've created a new BagIt profile, you'll want to customize it using the built-in BagIt profile editor. See also: Customizing BagIt Profiles","title":"Creating Profiles"},{"location":"users/bagit/customizing/","text":"Customizing Profiles To customize a BagIt profile, click the name of the profile in the profiles list, or click new and follow the steps to create a BagIt profile . About The About tab of the BagIt profile editor enables you to set a name and description for your profile. Info The Info tab includes fields to edit the BagIt-Profile-Info section of the profile. This includes the profile's URL identifier. General The General tab includes information about which BagIt versions your profile accepts, whether to allow fetch.txt files, and whether to allow miscellaneous top level files (arbitrary tag files directly under the root directory) and miscellaneous directories outside the payload (/data) directory. Manifests The Manifests tab specifies which manifests and tag manifests your profile requires. You can select multiple options from each list by holding down the Control key on Windows or the Command key on Mac while you click. Serialization The Serialization tab allows you to specify whether serialization is required, optional, or forbidden, as well as which serialization formats are supported. You can also specify here whether serialized bags must deserialize to a directory whose name matches the serialized file name. (For example, my_bag.tar must untar to my_bag and my_bag.zip must unzip to my_bag.) Tag Files The Tag Files tab includes a drop-down list for editing the profile's tag files, and for adding new tag files. Adding a New Tag File To add a new tag file: Click Add New Tag File on the drop-down list. Enter a name for the tag file. If the name includes slashes, the tag file will be created in a subdirectory beneath the bag's root directory. For example, custom-tags/photo-credits.txt would be placed in the bag's custom-tags directory. Click the Save button. Editing a Tag File To edit a tag file: Click the Tag Files tab. Select the name of the file you want to edit. Adding a Tag To add a tag to a tag file, click the New Tag button (visible in the screenshot above), then follow the steps in Editing a Tag below. Editing a Tag To edit a tag: Click the name of the tag you want to edit. Set the appropriate values in the dialog. Tag Name - The name of the tag. This is required. Required - A Yes/No value indicating whether the tag must have a value for the bag to be considered valid. Values - An optional list of allowed values for this tag. Default Value - An optional default value for this tag. Help - An optional help message. This message will be displayed to users who are filling out a bag's tag values in DART. Click the Save button. Deleting a Tag To delete a tag, click the red X to the right of the tag name in the tag list view. If the tag does not have a red X, it is a required tag from a published profile and cannot be deleted. When you delete the last tag of a tag file, DART deletes the tag file as well. Deleting a Tag File To delete a tag file, delete all of the tags in the file. See Deleting a Tag above.","title":"Customizing Profiles"},{"location":"users/bagit/customizing/#customizing-profiles","text":"To customize a BagIt profile, click the name of the profile in the profiles list, or click new and follow the steps to create a BagIt profile .","title":"Customizing Profiles"},{"location":"users/bagit/customizing/#about","text":"The About tab of the BagIt profile editor enables you to set a name and description for your profile.","title":"About"},{"location":"users/bagit/customizing/#info","text":"The Info tab includes fields to edit the BagIt-Profile-Info section of the profile. This includes the profile's URL identifier.","title":"Info"},{"location":"users/bagit/customizing/#general","text":"The General tab includes information about which BagIt versions your profile accepts, whether to allow fetch.txt files, and whether to allow miscellaneous top level files (arbitrary tag files directly under the root directory) and miscellaneous directories outside the payload (/data) directory.","title":"General"},{"location":"users/bagit/customizing/#manifests","text":"The Manifests tab specifies which manifests and tag manifests your profile requires. You can select multiple options from each list by holding down the Control key on Windows or the Command key on Mac while you click.","title":"Manifests"},{"location":"users/bagit/customizing/#serialization","text":"The Serialization tab allows you to specify whether serialization is required, optional, or forbidden, as well as which serialization formats are supported. You can also specify here whether serialized bags must deserialize to a directory whose name matches the serialized file name. (For example, my_bag.tar must untar to my_bag and my_bag.zip must unzip to my_bag.)","title":"Serialization"},{"location":"users/bagit/customizing/#tag-files","text":"The Tag Files tab includes a drop-down list for editing the profile's tag files, and for adding new tag files.","title":"Tag Files"},{"location":"users/bagit/customizing/#adding-a-new-tag-file","text":"To add a new tag file: Click Add New Tag File on the drop-down list. Enter a name for the tag file. If the name includes slashes, the tag file will be created in a subdirectory beneath the bag's root directory. For example, custom-tags/photo-credits.txt would be placed in the bag's custom-tags directory. Click the Save button.","title":"Adding a New Tag File"},{"location":"users/bagit/customizing/#editing-a-tag-file","text":"To edit a tag file: Click the Tag Files tab. Select the name of the file you want to edit.","title":"Editing a Tag File"},{"location":"users/bagit/customizing/#adding-a-tag","text":"To add a tag to a tag file, click the New Tag button (visible in the screenshot above), then follow the steps in Editing a Tag below.","title":"Adding a Tag"},{"location":"users/bagit/customizing/#editing-a-tag","text":"To edit a tag: Click the name of the tag you want to edit. Set the appropriate values in the dialog. Tag Name - The name of the tag. This is required. Required - A Yes/No value indicating whether the tag must have a value for the bag to be considered valid. Values - An optional list of allowed values for this tag. Default Value - An optional default value for this tag. Help - An optional help message. This message will be displayed to users who are filling out a bag's tag values in DART. Click the Save button.","title":"Editing a Tag"},{"location":"users/bagit/customizing/#deleting-a-tag","text":"To delete a tag, click the red X to the right of the tag name in the tag list view. If the tag does not have a red X, it is a required tag from a published profile and cannot be deleted. When you delete the last tag of a tag file, DART deletes the tag file as well.","title":"Deleting a Tag"},{"location":"users/bagit/customizing/#deleting-a-tag-file","text":"To delete a tag file, delete all of the tags in the file. See Deleting a Tag above.","title":"Deleting a Tag File"},{"location":"users/bagit/exporting/","text":"Exporting Profiles This feature isn't implemented yet. It will allow users to export DART BagIt profiles to standard BagIt Profiles as defined in this GitHub repo .","title":"Exporting Profiles"},{"location":"users/bagit/exporting/#exporting-profiles","text":"This feature isn't implemented yet. It will allow users to export DART BagIt profiles to standard BagIt Profiles as defined in this GitHub repo .","title":"Exporting Profiles"},{"location":"users/bagit/importing/","text":"Importing Profiles This feature isn't implemented yet. Currently, the only ways to get profiles into DART are: migrations setup modules creating your own through the UI","title":"Importing Profiles"},{"location":"users/bagit/importing/#importing-profiles","text":"This feature isn't implemented yet. Currently, the only ways to get profiles into DART are: migrations setup modules creating your own through the UI","title":"Importing Profiles"},{"location":"users/jobs/","text":"Jobs This page describes DART jobs.","title":"Jobs"},{"location":"users/jobs/#jobs","text":"This page describes DART jobs.","title":"Jobs"},{"location":"users/jobs/files/","text":"Adding Files Adding files to jobs. Removing Files","title":"Adding Files"},{"location":"users/jobs/files/#adding-files","text":"Adding files to jobs.","title":"Adding Files"},{"location":"users/jobs/files/#removing-files","text":"","title":"Removing Files"},{"location":"users/jobs/metadata/","text":"Metadata Job tags and metadata.","title":"Metadata"},{"location":"users/jobs/metadata/#metadata","text":"Job tags and metadata.","title":"Metadata"},{"location":"users/jobs/packaging/","text":"Packaging Define how files are packaged.","title":"Packaging"},{"location":"users/jobs/packaging/#packaging","text":"Define how files are packaged.","title":"Packaging"},{"location":"users/jobs/run/","text":"Run Your Job Screenshot and text describing how to run job. Creating a Workflow from a Job Describe how and what it means.","title":"Run Your Job"},{"location":"users/jobs/run/#run-your-job","text":"Screenshot and text describing how to run job.","title":"Run Your Job"},{"location":"users/jobs/run/#creating-a-workflow-from-a-job","text":"Describe how and what it means.","title":"Creating a Workflow from a Job"},{"location":"users/jobs/upload/","text":"Uploads Upload the files you've packaged.","title":"Uploads"},{"location":"users/jobs/upload/#uploads","text":"Upload the files you've packaged.","title":"Uploads"},{"location":"users/settings/app_settings/","text":"App Settings App Settings contain DART's application-wide settings. These may be used when creating bags and other packages. To view the list of all settings, select Settings App Settings from the main menu. Editing App Settings Click on any setting in the list to edit it. Note that some essential settings, such as Bagging Directory and Institution Domain cannot be renamed or deleted, though their values can be changed.","title":"App Settings"},{"location":"users/settings/app_settings/#app-settings","text":"App Settings contain DART's application-wide settings. These may be used when creating bags and other packages. To view the list of all settings, select Settings App Settings from the main menu.","title":"App Settings"},{"location":"users/settings/app_settings/#editing-app-settings","text":"Click on any setting in the list to edit it. Note that some essential settings, such as Bagging Directory and Institution Domain cannot be renamed or deleted, though their values can be changed.","title":"Editing App Settings"},{"location":"users/settings/internal_settings/","text":"Internal Settings Internal Settings contain configuration information that users cannot edit. These settings are created by plugins, setup packages, and software updates. Though you cannot change them, knowing their values may be helpful to DART users and developers.","title":"Internal Settings"},{"location":"users/settings/internal_settings/#internal-settings","text":"Internal Settings contain configuration information that users cannot edit. These settings are created by plugins, setup packages, and software updates. Though you cannot change them, knowing their values may be helpful to DART users and developers.","title":"Internal Settings"},{"location":"users/settings/remote_repositories/","text":"Remote Repositories Remote repositories are services to which you upload data for preservation. DART can query remote repositories to show the status of items you've uploaded for ingest, provided the following three conditions are met: The remote repository has a REST API. Most do, including APTrust, Fedora, DSpace, and many others. DART has a plugin that knows how to talk to the repository. (On initial release, the only plugin is for APTrust, but more may be coming.) You have a Remote Repository setting that points to the correct URL and contains valid login credentials. Listing Remote Repositories To view the list of Remote Repository settings, choose Settings Remote Repositories from the menu. Editing Remote Repositories Click on any repository in the list to edit it, or click the New button to create a new one. Description of Settings Name The name of the remote repository. This is required. It can be anything you want, and chaning it will not affect the behavior or availability of the repository. URL The base URL of the repository's REST API. This may or may not include path information. For example, https://example.com has no path information, while https://example.com/api/v2/ does include path info. Check with your repository to get the correct URL. Plugin Choose the plugin that can connect to your repository. If you don't see the plugin in the list, it has not been installed. Note that at the time of DART's initial release, the only available plugin is APTrustClient . User ID Enter the user ID you use to connect to the repository's REST API. If the API only uses a token and no user ID, leave this blank. API Token Enter the API token used to connect to this repository. You'll have to get a token from the repository itself. Login Extra This field is generally left blank. If your repository uses it, they should provide instructions on how to fill this in.","title":"Remote Repositories"},{"location":"users/settings/remote_repositories/#remote-repositories","text":"Remote repositories are services to which you upload data for preservation. DART can query remote repositories to show the status of items you've uploaded for ingest, provided the following three conditions are met: The remote repository has a REST API. Most do, including APTrust, Fedora, DSpace, and many others. DART has a plugin that knows how to talk to the repository. (On initial release, the only plugin is for APTrust, but more may be coming.) You have a Remote Repository setting that points to the correct URL and contains valid login credentials.","title":"Remote Repositories"},{"location":"users/settings/remote_repositories/#listing-remote-repositories","text":"To view the list of Remote Repository settings, choose Settings Remote Repositories from the menu.","title":"Listing Remote Repositories"},{"location":"users/settings/remote_repositories/#editing-remote-repositories","text":"Click on any repository in the list to edit it, or click the New button to create a new one.","title":"Editing Remote Repositories"},{"location":"users/settings/remote_repositories/#description-of-settings","text":"","title":"Description of Settings"},{"location":"users/settings/remote_repositories/#name","text":"The name of the remote repository. This is required. It can be anything you want, and chaning it will not affect the behavior or availability of the repository.","title":"Name"},{"location":"users/settings/remote_repositories/#url","text":"The base URL of the repository's REST API. This may or may not include path information. For example, https://example.com has no path information, while https://example.com/api/v2/ does include path info. Check with your repository to get the correct URL.","title":"URL"},{"location":"users/settings/remote_repositories/#plugin","text":"Choose the plugin that can connect to your repository. If you don't see the plugin in the list, it has not been installed. Note that at the time of DART's initial release, the only available plugin is APTrustClient .","title":"Plugin"},{"location":"users/settings/remote_repositories/#user-id","text":"Enter the user ID you use to connect to the repository's REST API. If the API only uses a token and no user ID, leave this blank.","title":"User ID"},{"location":"users/settings/remote_repositories/#api-token","text":"Enter the API token used to connect to this repository. You'll have to get a token from the repository itself.","title":"API Token"},{"location":"users/settings/remote_repositories/#login-extra","text":"This field is generally left blank. If your repository uses it, they should provide instructions on how to fill this in.","title":"Login Extra"},{"location":"users/settings/storage_services/","text":"Storage Services Storage services are not repositories! They are pickup and drop-off points for materials going into or coming out of repositories. Some repositories ask depositors to upload materials into an S3 bucket or an SFTP folder for ingest, and restore materials to a similar bucket or folder for depositors to retrieve. Storage services allow DART to connect to these pickup and drop-off points. Note, however, that you're free to send data to and from these storage services even if they're not ultimately bound for a preservation repository. Listing Storage Services To list all storage services, choose Settings Storage Services from the menu. Editing Storage Services Click any storage servicei in the list to edit it. Description of Settings Name The name of the service. Choose a name that's meaningful to you and that differentiates this service from others. You can change the name at any time without affecting the bevavior or availability of the service. Description A description of this service. Protocol Choose the network protocol used to communicate with this service. Note: At launch, DART supports only the S3 protocol. Host Enter the name or IP address of the service host. Do not include protocol prefixes like https:// or ftp:// . For example, the host name for Amazon's S3 service is s3.amazonaws.com . A locally hosted service may be s3.example.com or ftp.example.com . You can also enter an IP address here such as 127.0.0.1 . Port The port to connect to. In most cases, you'll want to leave this at 0 (zero). Set this only if the service is running on a non-standard port number. Bucket The name of the bucket you'll be uploading into or downloading from on the remote host. For the S3 protocol, this will be a bucket name like aptrust.dart.test . For protocols like FTP and rsync, this will be a directory name like uploads/ingest/ or downloads/restore . Allows Upload Choose Yes if this service allows you to upload files, No otherwise. Info This setting is important. When you run a job, DART gives you a choice of storage services to which to send your files. DART will show only those services where Allows Upload is set to Yes . Allows Download Choose Yes if this service allows you to download files, No otherwise. Info While DART does not support downloads in its initial release, it may support them in a future release. Login Enter your login name for the service. For FTP and rsync services, this will typically be a user name. For S3 services, it will be an access key ID. For S3 services, you may want to keep your access keys in an environment variable. If you choose to do so, you can enter env: followed by the name of the environment variable here and DART will pull the setting from the environment at run time. For example, if you keep your AWS access key id in an environment variable called AWS_ACCESS_KEY_ID, then enter env:AWS_ACCESS_KEY_ID . Password Enter your password for the service. For FTP and rsync services, this will typically be an actual passowrd. For S3 services, it will be an secret access key. As with the Login field above, you can set this to reference an environment variable using the env: pattern. For example, env:AWS_SECRET_ACCESS_KEY . Login Extra This field is typically not used. If your storage service requires it, the plugin documentation should describe what to enter here. Otherwise, leave this field blank.","title":"Storage Services"},{"location":"users/settings/storage_services/#storage-services","text":"Storage services are not repositories! They are pickup and drop-off points for materials going into or coming out of repositories. Some repositories ask depositors to upload materials into an S3 bucket or an SFTP folder for ingest, and restore materials to a similar bucket or folder for depositors to retrieve. Storage services allow DART to connect to these pickup and drop-off points. Note, however, that you're free to send data to and from these storage services even if they're not ultimately bound for a preservation repository.","title":"Storage Services"},{"location":"users/settings/storage_services/#listing-storage-services","text":"To list all storage services, choose Settings Storage Services from the menu.","title":"Listing Storage Services"},{"location":"users/settings/storage_services/#editing-storage-services","text":"Click any storage servicei in the list to edit it.","title":"Editing Storage Services"},{"location":"users/settings/storage_services/#description-of-settings","text":"","title":"Description of Settings"},{"location":"users/settings/storage_services/#name","text":"The name of the service. Choose a name that's meaningful to you and that differentiates this service from others. You can change the name at any time without affecting the bevavior or availability of the service.","title":"Name"},{"location":"users/settings/storage_services/#description","text":"A description of this service.","title":"Description"},{"location":"users/settings/storage_services/#protocol","text":"Choose the network protocol used to communicate with this service. Note: At launch, DART supports only the S3 protocol.","title":"Protocol"},{"location":"users/settings/storage_services/#host","text":"Enter the name or IP address of the service host. Do not include protocol prefixes like https:// or ftp:// . For example, the host name for Amazon's S3 service is s3.amazonaws.com . A locally hosted service may be s3.example.com or ftp.example.com . You can also enter an IP address here such as 127.0.0.1 .","title":"Host"},{"location":"users/settings/storage_services/#port","text":"The port to connect to. In most cases, you'll want to leave this at 0 (zero). Set this only if the service is running on a non-standard port number.","title":"Port"},{"location":"users/settings/storage_services/#bucket","text":"The name of the bucket you'll be uploading into or downloading from on the remote host. For the S3 protocol, this will be a bucket name like aptrust.dart.test . For protocols like FTP and rsync, this will be a directory name like uploads/ingest/ or downloads/restore .","title":"Bucket"},{"location":"users/settings/storage_services/#allows-upload","text":"Choose Yes if this service allows you to upload files, No otherwise. Info This setting is important. When you run a job, DART gives you a choice of storage services to which to send your files. DART will show only those services where Allows Upload is set to Yes .","title":"Allows Upload"},{"location":"users/settings/storage_services/#allows-download","text":"Choose Yes if this service allows you to download files, No otherwise. Info While DART does not support downloads in its initial release, it may support them in a future release.","title":"Allows Download"},{"location":"users/settings/storage_services/#login","text":"Enter your login name for the service. For FTP and rsync services, this will typically be a user name. For S3 services, it will be an access key ID. For S3 services, you may want to keep your access keys in an environment variable. If you choose to do so, you can enter env: followed by the name of the environment variable here and DART will pull the setting from the environment at run time. For example, if you keep your AWS access key id in an environment variable called AWS_ACCESS_KEY_ID, then enter env:AWS_ACCESS_KEY_ID .","title":"Login"},{"location":"users/settings/storage_services/#password","text":"Enter your password for the service. For FTP and rsync services, this will typically be an actual passowrd. For S3 services, it will be an secret access key. As with the Login field above, you can set this to reference an environment variable using the env: pattern. For example, env:AWS_SECRET_ACCESS_KEY .","title":"Password"},{"location":"users/settings/storage_services/#login-extra","text":"This field is typically not used. If your storage service requires it, the plugin documentation should describe what to enter here. Otherwise, leave this field blank.","title":"Login Extra"}]}